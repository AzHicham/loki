name: Build and test

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  SBX_ECR_REGISTRY: "658717835865.dkr.ecr.eu-west-1.amazonaws.com"
  PRD_ECR_REGISTRY: "162230498103.dkr.ecr.eu-west-1.amazonaws.com"
  REGION: eu-west-1

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout loki repo
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install dependencies
      run: |
        sudo apt update
        # loki dependencies
        sudo apt install libzmq3-dev lld protobuf-compiler
        # pre-commit dependencies
        sudo apt install -y python3 python3-pip git lld
        pip install pre-commit

    - name: Install rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: clippy, rustfmt

    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Restore cache of loki dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run Pre-commit
      run: |
        pre-commit install --install-hooks
        # runs rustfmt
        pre-commit run --all --show-diff-on-failure

    - name: Test debug
      run: |
        cargo test --workspace
        cargo test --workspace --features "loki_server/vehicle_loads"

    - name: Test Release
      if:  success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        cargo test --release --workspace
        cargo test --release --workspace --features "loki_server/vehicle_loads"

  docker:
    needs: checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Build dockers
      run: |
        ./build_dockers.sh -t latest

    - name: Binarize
      run: docker run --rm -v "$PWD":/storage -v /var/run/docker.sock:/var/run/docker.sock   navitia/mc_bina:latest

    - name: Launch dockers
      working-directory: ./mc_navitia
      run: |
        docker-compose up --detach

    - name: install test depedencies
      run: sudo apt install -y httpie jq

    - name: Test corse loki
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/corse/journeys?from=8.73421%3B41.91907&to=8.76055%3B41.92878&datetime=20200505T091505&_override_scenario=distributed&_use_pt_socket=True&' | jq .journeys[0].duration)
        test $result != null
    - name: Test corse kraken
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/corse/journeys?from=8.73421%3B41.91907&to=8.76055%3B41.92878&datetime=20200505T091505&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null

    - name: Test transilien basic
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/transilien/journeys?from=stop_area%3ADUA8775810&to=stop_area%3ADUA8739357&datetime=20210322T142346&_override_scenario=distributed&_use_pt_socket=True&' | jq .journeys[0].duration)
        test $result != null
    - name: Test transilien kraken
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/transilien/journeys?from=stop_area%3ADUA8775810&to=stop_area%3ADUA8739357&datetime=20210322T142346&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null

    - name: Test idfm basic
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/idfm/journeys?from=stop_area%3Astop_area%3A8775810&to=stop_area%3Astop_area%3A59033&datetime=20200505T080000&_override_scenario=distributed&_use_pt_socket=True&' | jq .journeys[0].duration)
        test $result != null
    - name: Test idfm kraken
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/idfm/journeys?from=stop_area%3Astop_area%3A8775810&to=stop_area%3Astop_area%3A59033&datetime=20200505T080000&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null

    - name: logs
      working-directory: ./mc_navitia
      if: failure()
      run: |
        docker-compose logs

    - name: push dev docker images to dockerhub
      if:  success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker push navitia/mc_bina:latest
        docker push navitia/mc_jormun:latest
        docker push navitia/mc_kraken:latest
        docker push navitia/loki:dev
        docker logout

    - name: push release docker images to dockerhub
      if: success() && startsWith(github.ref, 'refs/tags/')
      run: |
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        TAG=${GITHUB_REF_NAME}
        docker tag navitia/loki:dev navitia/loki:${TAG}
        docker push navitia/loki:${TAG}
        docker tag navitia/loki:dev navitia/loki:latest
        docker push navitia/loki:latest
        docker logout

    - name: cleanup
      working-directory: ./mc_navitia
      if: always()
      run: |
        docker-compose down --rmi all -v

  aws:
    runs-on: [self-hosted, loki, sandbox]
    if: github.event_name == 'push'
    needs: docker
    steps:
      - name: Push dev images to aws sandbox registry
        if:  github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          docker pull navitia/loki:dev
          docker tag navitia/loki:dev $SBX_ECR_REGISTRY/navitia-loki-loki:dev
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin  $SBX_ECR_REGISTRY
          docker push $SBX_ECR_REGISTRY/navitia-loki-loki:dev
          docker logout $SBX_ECR_REGISTRY

      - name: Push release image to aws prod registry
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG=${GITHUB_REF_NAME}
          docker pull navitia/loki:$TAG
          docker tag navitia/loki:$TAG $PRD_ECR_REGISTRY/navitia-loki-loki:$TAG
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin  $PRD_ECR_REGISTRY
          docker push $PRD_ECR_REGISTRY/navitia-loki-loki:$TAG
          docker logout $PRD_ECR_REGISTRY


  coverage:
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
            sudo apt install libzmq3-dev lld protobuf-compiler

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy

      - name: Restore cache of loki dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install llvm-cov & Build & Tests
        run: |
          rustup component add llvm-tools-preview
          cargo install cargo-llvm-cov
          cargo llvm-cov clean --workspace # remove artifacts that may affect the coverage results
          cargo llvm-cov --no-report --workspace
          cargo llvm-cov --no-report --workspace --features vehicle_loads
          cargo llvm-cov --no-run --workspace --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          name: codecov-loki # optional
          verbose: true # optional (default = false)


  sonar:
    if: ${{ github.actor != 'dependabot[bot]' }}
    needs: checks
    name: Analyzing code with Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - name: Install dependencies
      run: |
          sudo apt install libzmq3-dev lld protobuf-compiler

    - name: Install rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: clippy
    - name: Run cargo clippy
      run: cargo clippy --workspace --all-features --message-format=json -- --warn clippy::pedantic > clippy.json
    - name: Install 'cargo-sonar'
      run: cargo install cargo-sonar --version 0.14.1 --locked --no-default-features --features clippy
    - name: Convert into Sonar compatible format
      run: cargo sonar --issues clippy --clippy-path clippy.json
    - name: Run sonar-scanner
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=Hove_loki
          -Dsonar.projectName=loki
          -Dsonar.sources=.
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.externalIssuesReportPaths=sonar-issues.json
          -Dsonar.organization=hove-io
          -Dsonar.verbose=true
