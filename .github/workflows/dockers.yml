name: Dockers & Artemis

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - name : Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Build dockers
      run: |
        ./build_dockers.sh -o ${{secrets.oauth_token}}
    - name: Binarize
      run: docker run --rm -v "$PWD":/storage -v /var/run/docker.sock:/var/run/docker.sock   navitia/mc_bina
    - name: Launch dockers
      working-directory: ./mc_navitia
      run: |
        docker-compose up --detach
    - name: install test depedencies
      run: sudo apt install -y httpie jq

    - name: Test corse loads
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/corse-loki-loads/journeys?from=8.73421%3B41.91907&to=8.76055%3B41.92878&datetime=20200505T091505&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null
    - name: Test corse basic
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/corse-loki-basic/journeys?from=8.73421%3B41.91907&to=8.76055%3B41.92878&datetime=20200505T091505&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null
    - name: Test corse kraken
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/corse-kraken/journeys?from=8.73421%3B41.91907&to=8.76055%3B41.92878&datetime=20200505T091505&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null


    - name: Test transilien loads
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/transilien-loki-loads/journeys?from=stop_area%3ADUA8775810&to=stop_area%3ADUA8739357&datetime=20210322T142346&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null
    - name: Test transilien basic
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/transilien-loki-basic/journeys?from=stop_area%3ADUA8775810&to=stop_area%3ADUA8739357&datetime=20210322T142346&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null
    - name: Test transilien kraken
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/transilien-kraken/journeys?from=stop_area%3ADUA8775810&to=stop_area%3ADUA8739357&datetime=20210322T142346&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null

    - name: Test idfm loads
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/idfm-loki-loads/journeys?from=stop_area%3Astop_area%3A8775810&to=stop_area%3Astop_area%3A59033&datetime=20200505T080000&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null
    - name: Test idfm basic
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/idfm-loki-loads/journeys?from=stop_area%3Astop_area%3A8775810&to=stop_area%3Astop_area%3A59033&datetime=20200505T080000&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null
    - name: Test idfm kraken
      run: |
        result=$( http GET 'http://127.0.0.1:9191/v1/coverage/idfm-loki-loads/journeys?from=stop_area%3Astop_area%3A8775810&to=stop_area%3Astop_area%3A59033&datetime=20200505T080000&_override_scenario=distributed&' | jq .journeys[0].duration)
        test $result != null

    - name: logs
      working-directory: ./mc_navitia
      if: failure()
      run: |
        docker-compose logs

    - name: push docker images to dockerhub
      if: ${{ success() }}
      run: |
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker push navitia/mc_bina
        docker push navitia/mc_loki
        docker push navitia/mc_jormun
        docker push navitia/mc_kraken
        docker push navitia/mc_artemis_bina
        docker logout

    - name: cleanup
      working-directory: ./mc_navitia
      if: always()
      run: |
        docker-compose down --rmi all -v

  artemis:
    #if: ${{ github.event_name == 'push'}}
    runs-on: ubuntu-latest
    needs: build
    # Checkout Loki
    steps:
    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Checkout Loki
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    # Checkout Artemis & submodules
    - name: Checkout Artemis
      env:
        ARTEMIS_GITHUB_TOKEN: ${{secrets.oauth_token}}
      run: |
        git clone https://$ARTEMIS_GITHUB_TOKEN@github.com/CanalTP/artemis.git --branch master ./artemis
        git clone https://$ARTEMIS_GITHUB_TOKEN@github.com/CanalTP/artemis_data.git --branch master ./artemis/artemis_data
        git clone https://$ARTEMIS_GITHUB_TOKEN@github.com/AzHicham/artemis_references.git --branch artemis_ng ./artemis/artemis_references

    # Pull & build docker images
    - name: Build bina, Kraken, Jormun & Loki images
      run: |
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker pull navitia/mc_artemis_bina
        docker pull navitia/mc_kraken
        docker pull navitia/mc_jormun
        docker pull navitia/mc_loki
        cd ./artemis
        docker build -t artemis .

    # Copy artemis/data/{coverage}/fusio to ./loki/data/{coverage}/ntfs
    - name: Copy coverage data
      run: |
        rm -rf ./data/*
        mkdir -p ./data/idfm/ntfs
        cp -r -a ./artemis/artemis_data/idfm/fusio/. ./data/idfm/ntfs

    # Run binarisation
    - name: Run Artemis binarisation
      run: |
        docker run --rm -v "$PWD":/storage -v /var/run/docker.sock:/var/run/docker.sock  navitia/mc_artemis_bina

    # Start dockers & Run Tests
    - name: Run Tests
      continue-on-error: true
      run: |
        docker-compose -f ./mc_navitia/docker-compose.yml up --detach
        cd ./artemis
        docker run  \
        --network host \
        -v $PWD:/usr/src/app  \
        -e ARTEMIS_LOG_LEVEL=DEBUG \
        -e ARTEMIS_USE_ARTEMIS_NG=True   \
        -e ARTEMIS_URL_JORMUN=http://localhost:9191 \
        -e ARTEMIS_REFERENCE_FILE_PATH='artemis_references' \
        artemis py.test ./artemis/tests/idfm_test.py --skip_cities --skip_bina

    - name: Archive Artemis artifacts (logs + ref)
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: logs-and-ref
        path: |
            ./artemis/output/**/*
            ./artemis/junit/*.xml
            ./artemis/logs
